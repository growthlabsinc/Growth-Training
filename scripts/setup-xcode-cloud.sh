#!/bin/bash

# setup-xcode-cloud.sh
# Quick setup script for Xcode Cloud

echo "üöÄ Xcode Cloud Setup Helper for Growth App"
echo "========================================"

# Check if we're in the right directory
if [ ! -f "Growth.xcodeproj/project.pbxproj" ]; then
    echo "‚ùå Error: Must run from project root directory"
    exit 1
fi

# Step 1: Ensure scheme is shared
echo "1Ô∏è‚É£ Checking Xcode scheme..."
SCHEME_PATH="Growth.xcodeproj/xcshareddata/xcschemes/Growth.xcscheme"
if [ -f "$SCHEME_PATH" ]; then
    echo "‚úÖ Scheme 'Growth' is already shared"
else
    echo "‚ö†Ô∏è  Scheme 'Growth' needs to be shared in Xcode:"
    echo "   1. Open Xcode"
    echo "   2. Go to Product ‚Üí Scheme ‚Üí Manage Schemes"
    echo "   3. Check 'Shared' for the Growth scheme"
fi

# Step 2: Check Package.resolved
echo -e "\n2Ô∏è‚É£ Checking Swift Package Manager..."
PACKAGE_RESOLVED="Growth.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved"
if [ -f "$PACKAGE_RESOLVED" ]; then
    echo "‚úÖ Package.resolved exists"
else
    echo "‚ö†Ô∏è  Package.resolved missing - will be created on first build"
fi

# Step 3: Verify CI scripts
echo -e "\n3Ô∏è‚É£ Checking CI scripts..."
CI_SCRIPTS=("ci_post_clone.sh" "ci_pre_xcodebuild.sh" "ci_post_xcodebuild.sh")
for script in "${CI_SCRIPTS[@]}"; do
    if [ -f "ci_scripts/$script" ] && [ -x "ci_scripts/$script" ]; then
        echo "‚úÖ $script is present and executable"
    else
        echo "‚ùå Missing or not executable: ci_scripts/$script"
    fi
done

# Step 4: Check Firebase configuration
echo -e "\n4Ô∏è‚É£ Checking Firebase configuration..."
FIREBASE_CONFIGS=(
    "Growth/Resources/Plist/GoogleService-Info.plist"
    "Growth/Resources/Plist/dev.GoogleService-Info.plist"
    "Growth/Resources/Plist/staging.GoogleService-Info.plist"
)
for config in "${FIREBASE_CONFIGS[@]}"; do
    if [ -f "$config" ]; then
        echo "‚úÖ Found: $config"
    else
        echo "‚ö†Ô∏è  Missing: $config"
    fi
done

# Step 5: Generate workflow recommendations
echo -e "\n5Ô∏è‚É£ Recommended Xcode Cloud Workflows:"
echo ""
echo "üì± Development Workflow:"
echo "   - Name: 'Dev - Continuous Integration'"
echo "   - Start: Push to 'develop' branch"
echo "   - Actions: Build, Test, Archive"
echo "   - Post-Actions: Deploy to TestFlight (Internal)"
echo ""
echo "üöÄ Production Workflow:"
echo "   - Name: 'Prod - Release'"
echo "   - Start: Push to 'main' branch"
echo "   - Actions: Build, Test, Archive"
echo "   - Post-Actions: Deploy to TestFlight (External)"
echo ""
echo "üîç Pull Request Workflow:"
echo "   - Name: 'PR - Validation'"
echo "   - Start: Pull Request to 'main' or 'develop'"
echo "   - Actions: Build, Test"
echo "   - Post-Actions: Comment on PR"

# Step 6: Next steps
echo -e "\nüìã Next Steps:"
echo "1. Open project in Xcode"
echo "2. Select Product ‚Üí Xcode Cloud ‚Üí Create Workflow"
echo "3. Sign in with your Apple ID"
echo "4. Grant access to your GitHub repository"
echo "5. Configure your first workflow using recommendations above"
echo ""
echo "üìö For detailed instructions, see: docs/xcode-cloud-setup.md"
echo ""
echo "‚úÖ Setup check complete!"