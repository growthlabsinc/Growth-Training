---

## Project Structure (Draft 1)

This document proposes a directory structure for the "Growth" iOS application and the Firebase Cloud Functions backend. The structure aims for clarity, modularity, and ease of development.

**1. iOS Application Project Structure (`GrowthApp`)**

The iOS project will follow a structure that groups by feature, with common elements and core functionalities separated. We'll assume a modern architectural pattern like MVVM (Model-View-ViewModel) or a similar declarative pattern suitable for SwiftUI.

```
GrowthApp/
├── GrowthApp.xcodeproj
├── GrowthApp/
│   ├── Application/
│   │   ├── GrowthAppApp.swift         // App entry point (App struct)
│   │   ├── AppSceneDelegate.swift     // SceneDelegate if needed
│   │   └── AppDelegate.swift          // AppDelegate
│   │
│   ├── Core/
│   │   ├── Authentication/            // Authentication services, user session management
│   │   │   └── AuthService.swift
│   │   ├── Data/                      // Core data models (cross-feature), persistence logic
│   │   │   ├── Models/                // Shared data models (e.g., UserProfile.swift)
│   │   │   └── Persistence/           // CoreData stack, UserDefaults helpers
│   │   ├── Networking/                // Firebase interaction layer (generic callable function invoker)
│   │   │   └── FirebaseClient.swift
│   │   ├── UI/                        // Shared UI components, theming, style guides
│   │   │   ├── Components/            // Reusable SwiftUI views (e.g., CustomButton.swift)
│   │   │   ├── Theme/                 // Colors, Fonts, Styles
│   │   │   └── Extensions/            // SwiftUI View extensions, etc.
│   │   ├── Utilities/                 // Common helper functions, constants
│   │   └── Routing/                   // Navigation logic, deep linking
│   │
│   ├── Features/
│   │   ├── Onboarding/                // User account creation, login, consent flow (Epic 2)
│   │   │   ├── Views/
│   │   │   ├── ViewModels/
│   │   │   └── Services/              // Onboarding specific logic
│   │   ├── GrowthMethods/             // Method listing, detail views (Epic 3)
│   │   │   ├── Views/
│   │   │   ├── ViewModels/
│   │   │   └── Models/                // GrowthMethod.swift
│   │   ├── SessionLogging/            // Session logging, history, progress charts (Epic 4)
│   │   │   ├── Views/
│   │   │   ├── ViewModels/
│   │   │   └── Models/                // SessionLog.swift
│   │   ├── AICoach/                   // AI Chat Coach feature (Epic 6)
│   │   │   ├── Views/                 // ChatView.swift, MessageBubble.swift
│   │   │   ├── ViewModels/            // AICoachViewModel.swift
│   │   │   └── Services/              // AICoachService.swift (handles calls to Firebase Function)
│   │   ├── EducationalResources/      // Articles, content display (Epic 5)
│   │   │   ├── Views/
│   │   │   ├── ViewModels/
│   │   │   └── Models/                // Article.swift
│   │   ├── Timer/                     // In-app exercise timer (Epic 7)
│   │   │   ├── Views/
│   │   │   └── ViewModels/
│   │   ├── Gamification/              // Streaks, badges display (Epic 8)
│   │   │   ├── Views/
│   │   │   ├── ViewModels/
│   │   │   └── Models/                // Badge.swift, Streak.swift
│   │   ├── UserProgression/           // Readiness tracking, overtraining UI (Epic 9)
│   │   │   ├── Views/
│   │   │   └── ViewModels/
│   │   ├── ProfileSettings/           // User profile, settings, privacy/legal links (part of Epic 10)
│   │   │   ├── Views/
│   │   │   └── ViewModels/
│   │
│   ├── Resources/
│   │   ├── Assets.xcassets/           // Images, icons, colors
│   │   ├── Localizable/               // Strings files for localization
│   │   │   └── en.lproj/
│   │   └── Plist/                     // Info.plist, GoogleService-Info.plist
│
└── GrowthAppTests/                    // Unit tests
└── GrowthAppUITests/                  // UI tests
```

**2. Firebase Cloud Functions Project Structure (`functions`)**

The backend will consist of Python Cloud Functions. The structure will group functions by their primary responsibility.

```
functions/
├── main.py                     // Main entry point for deploying all functions
├── requirements.txt            // Python dependencies
├── .firebaserc                 // Firebase project configuration
├── firebase.json               // Firebase deployment configuration (functions, firestore rules, etc.)
│
├── src/                        // Source code for the functions
│   ├── __init__.py
│   ├── ai_coach/               // Logic related to the AI Chat Coach
│   │   ├── __init__.py
│   │   ├── handler.py          // Main callable function for AI coach queries (processGrowthCoachQuery)
│   │   ├── RAGOrchestrator.py  // Class/module for RAG logic (Vertex Search, Gemini calls)
│   │   ├── prompt_manager.py   // Logic for constructing and managing prompts
│   │   └── history_manager.py  // Logic for retrieving/storing conversation history
│   │
│   ├── knowledge_base/         // Functions for managing knowledge base ingestion
│   │   ├── __init__.py
│   │   ├── firestore_triggers.py // Firestore-triggered function for KB updates to Vertex AI Search
│   │   └── vertex_ai_search_admin.py // Utilities for interacting with Vertex AI Search admin APIs
│   │
│   ├── user_management/        // Functions related to user data management (e.g., GDPR erasure)
│   │   ├── __init__.py
│   │   └── data_deletion.py    // Callable function for handling user data deletion requests
│   │
│   ├── core/                   // Shared utilities for backend functions
│   │   ├── __init__.py
│   │   ├── config.py           // Configuration loading (e.g., project ID, regions)
│   │   ├── dlp_service.py      // Wrapper for Cloud DLP API interactions
│   │   ├── error_handler.py    // Common error handling utilities
│   │   └── gcp_clients.py      // Centralized initialization for GCP service clients (Vertex AI, Firestore Admin)
│   │
│   └── (other_feature_specific_functions)/ // e.g., for complex gamification logic if needed
│
├── firestore.rules             // Firestore security rules
├── storage.rules               // Cloud Storage security rules (if used)
│
└── tests/                      // Unit tests for Cloud Functions
    ├── __init__.py
    ├── ai_coach/
    └── ...
```

---
